<preface id="intro">

  <title>Introduction</title>

  <sect1 id="welcome">
    <title>Welcome</title>
    <para>Welcome to &csbu;</para>
    <sect2>
      <title>Philosophy</title>

      <para>In a nutshell, what you are reading is intended to be a
      shop class for computer science.  Young computer science
      students are taught to "drive" the computer; but where do you go
      to learn what is under the hood?  Trying to understand the
      operating system is unfortunately not as easy as just opening
      the bonnet.  The current Linux kernel runs into the millions of
      lines of code, add to that the other critical parts of a modern
      operating system (the compiler, assembler and system libraries)
      and your code base becomes unimaginable.  Further still, add a
      University level operating systems course (or four), some good
      reference manuals, two or three years of C experience and, just
      maybe, you might be able to figure out where to <emphasis>start
      looking</emphasis> to make sense of it all.
      </para>

      <para>To keep with the car analogy, the prospective student is
      starting out trying to work on a Formula One engine without ever
      knowing how a two stroke motor operates.  During their shop
      class the student should pull apart, twist, turn and put back
      together that two stroke motor, and consequentially have a pretty
      good framework for understanding just how the Formula One engine
      works.  Nobody will expect them to be a Formula One engineer,
      but they are well on their way!</para>

    </sect2>
    <sect2>
      <title>Why <emphasis>from the bottom up</emphasis>?</title>

      <para>Not everyone wants to attend shop class.  Most people only
      want to drive the car, not know how to build one from scratch.
      Obviously any general computing curriculum has to take this into
      account else it won't be relevant to its students.  So computer
      science is taught from the "top down"; applications, high level
      programming, software design and development theory, possibly
      data structures.  Students will probably be exposed to binary,
      hopefully binary logic, possibly even some low level concepts
      such as registers, opcodes and the like at a superficial
      level.</para>

      <para>This book aims to move in completely the opposite
      direction, working from operating systems fundamentals through
      to how those applications are complied and executed.  </para>
    </sect2>

    <sect2>
      <title>Enabling technologies</title>

      <para>This book is only possible thanks to the development of
      <glossterm linkend="opensource">Open Source</glossterm>
      technologies.  Before Linux it was like taking a shop course
      with a car that had it's bonnet welded shut; today we are in a
      position to open that bonnet, poke around with the insides and,
      better still, take that engine and use it to do whatever we
      want.</para>
    </sect2>

  </sect1>

</preface>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("csbu.sgml" "book" "preface")
End:
-->
